@startuml

class User {
	- email: string
	- password: string
	- created_at: DateTime
'-------------------------------
	+ update_email()
	+ update_password()
}

class UserService {
        + create_user()
        + update_email()
        + update_password()
        + reset_password()
	+ enforce_password_policy()
}

class Task {
	- id: int
	- title: string
	- description: string
	- group_id: int
	- created_at: DateTime
	- due_date: DateTime
	- status: boolean
'--------------------------------
	+ update_title()
	+ update_description()
	+ update_due_date()
	+ update_status()
}

class TaskService {
        + create_task()
        + update_task()
        + complete_task()
        + delete_task()
	+ get_tasks_by_group(group_id: int): List<Task>
}

class Group {
	- id: int
	- name: string
	- description: string
	- created_at: DateTime
'---------------------------------
	+ update_name()
	+ update_description()
}

class GroupService {
	+ create_group()
	+ update_group()
	+ delete_group()
}

class Membership {
	- user: User
	- group: Group
	- role: Role
	- inviter_email: string
	- invite_date: DateTime
	- status: InvitationStatus
	- join_date: DateTime
'---------------------------------
	+ update_status()
}

class MembershipService {
	+ create_membership()
	+ send_invitation()
	+ accept_invitation()
	+ reject_invitation()
        + get_members_by_group(group: Group): List<Membership>

}

class AuthService {
	- auth_token: string
'---------------------------------
	+ login()
	+ logout()
	+ authenticate_user()
	+ generate_token()
	+ validate_token()
	+ hash_password()
}

class SoftwareLicense {
	- key: string
	- created_at: DateTime
	- used_status: int
'---------------------------------
	+ create_license(userEmail: string)
	+ validate_license(key: string)
	+ update_license_status()
}

class SoftwareLicenseService {
	+ save_license()
	+ update_licenseStatus()
	+ get_license()
}

enum Role {
        ADMIN
        CONTRIBUTOR
        READER
}

enum InvitationStatus {
        SENT
        ACCEPTED
        REJECTED
}

User --> TaskService: creates Task via
User --> GroupService: creates Group via
User --> MembershipService: creates Membership via
User "1" *-- "*" Membership: has
AuthService --> User: authenticates
UserService --> User: manages

TaskService --> Task: manages
Task "*" -- "1" Group: belongs to

GroupService --> Group: manages
Group "1" *-- "1..*" Membership: has
Group "1" *-- "*" Task: has

MembershipService --> Membership: manages
Role --> Membership: assigned
InvitationStatus --> Membership: assigned

UserService --> SoftwareLicense: creates User via
SoftwareLicenseService --> SoftwareLicense: manages

@enduml
