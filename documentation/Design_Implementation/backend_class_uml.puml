@startuml

class User {
	- id: int
	- username: string
	- email: string
	- password: string
	- createdAt: DateTime
'-------------------------------
	+ updateUsername()
	+ updateEmail()
	+ resetPassword()
}

'class UserService {
	'+ updateUsername()
	'+ updateEmail()
	'+ resetPassword()
'}

class Task {
	- id: int
	- title: string
	- description: string
	- createdAt: DateTime
	- dueDate: DateTime
	- location: string
'--------------------------------
	+ createTask()
	+ updateTitle()
	+ updateDescription()
	+ updateDueDate()
	+ completeTask()
	+ deleteTask()
}

'class TaskService {
	'+ createTask()
	'+ updateTask()
	'+ removeTask()
'}

class Group {
	- id: int
	- name: string
	- description: string
	- createdAt: DateTime
'---------------------------------
	+ createGroup()
	+ addMember(user: User, role: Role)
	' addMember would call assignRole of the GroupMembership class
	+ removeMember(user:User)
	+ getMembers(): List<GroupMembership>
	+ deleteGroup()
}

'class GroupService {
	'+ createGroup()
	'+ addMember(user: User, role: Role)
	'+ removeMember()
	'+ deleteGroup()
'}

class GroupMembership {
	- user: User
	- group: Group
	- role: Role
	- joinDate: DateTime
'---------------------------------
	+ assignRole()
}

class Invitation {
	- id: int
	- groupID: int
	- inviter: User
	- invitee: User
	- invitedAt: DateTime
	- status: InvitationStatus
'---------------------------------
	+ sendInvitation()
	+ acceptInvitation()
	+ rejectInvitation()
}

class AuthService {
	- authToken: string
'---------------------------------
	+ authenticateUser()
	+ generateToken()
	+ validateToken()
	+ hashPassword()
}

' Adding the Notification class requires us to edit the SRS document
class Notification {
	- id: int
	- group: Group
	- initiator: User
	- message: string
	- createdAt: DateTime
	- status: 
'---------------------------------
	
}

enum Role {
        Admin
        Contributor
        Reader
}

enum InvitationStatus {
        SENT
        ACCEPTED
        REJECTED
}

User "1" -- "1..*" GroupMembership
Group "1" -- "1..*" GroupMembership
Role -->  GroupMembership: assigned 
User --> GroupMembership: assigns role

User --> Invitation : sends 
Invitation --> User : is sent to 
Invitation --> Group : invites to
Group "1" -- "1..*" Invitation

Group "1" -- "*" Task : has
Task "1" -- "1" Group: belongs
User --> Task : creates 

User --> Group : creates

Invitation --> InvitationStatus: has status
AuthService --> User: authenticates

@enduml
