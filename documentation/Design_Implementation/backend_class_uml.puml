@startuml

class User {
	- email: string
	- password: string
	- createdAt: DateTime
'-------------------------------
	+ updateEmail()
	+ updatePassword()
}

class UserService {
        + createUser()
        + updateEmail()
        + updatePassword()
        + resetPassword()
	+ enforcePasswordPolicy()
}

class Task {
	- id: int
	- title: string
	- description: string
	- groupID: int
	- createdAt: DateTime
	- dueDate: DateTime
	- status: boolean
'--------------------------------
	+ updateTitle()
	+ updateDescription()
	+ updateDueDate()
	+ updateStatus()
}

class TaskService {
        + createTask()
        + updateTask()
        + completeTask()
        + deleteTask()
	+ getTasksByGroup(groupID: int): List<Task>
}

class Group {
	- id: int
	- name: string
	- description: string
	- createdAt: DateTime
'---------------------------------
	+ updateName()
	+ updateDescription()
}

class GroupService {
	+ createGroup()
	+ updateGroup()
	+ deleteGroup()
}

class Membership {
	- user: User
	- group: Group
	- role: Role
	- inviterEmail: string
	- inviteDate: DateTime
	- status: InvitationStatus
	- joinDate: DateTime
'---------------------------------
	+ updateStatus()
}

class MembershipService {
	+ createMembership()
	+ sendInvitation()
	+ acceptInvitation()
	+ rejectInvitation()
        + getMembersByGroup(group: Group): List<Membership>

}

class AuthService {
	- authToken: string
'---------------------------------
	+ login()
	+ logout()
	+ authenticateUser()
	+ generateToken()
	+ validateToken()
	+ hashPassword()
}

class SoftwareLicense {
	- key: string
	- createdAt: DateTime
	- assignedTo: string
		' assigned to the email address of a user
	- usedStatus: int
'---------------------------------
	+ createLicense(userEmail: string)
	+ validateLicense(key: string)
	+ updateLicenseStatus()
}

class SoftwareLicenseService {
	+ saveLicense()
	+ updateLicenseStatus()
	+ getLicense()
}

enum Role {
        Admin
        Contributor
        Reader
}

enum InvitationStatus {
        SENT
        ACCEPTED
        REJECTED
}

User --> TaskService: creates Task via
User --> GroupService: creates Group via
User --> MembershipService: creates Membership via
User "1" *-- "*" Membership: has
AuthService --> User: authenticates
UserService --> User: manages

TaskService --> Task: manages
Task "*" -- "1" Group: belongs to

GroupService --> Group: manages
Group "1" *-- "1..*" Membership: has
Group "1" *-- "*" Task: has

MembershipService --> Membership: manages
Role --> Membership: assigned
InvitationStatus --> Membership: assigned

SoftwareLicense "1" o-- "1" User: assigned to 
UserService --> SoftwareLicense: creates User via
SoftwareLicenseService --> SoftwareLicense: manages

@enduml
